.comment;aslink.rno

.chapter;The Linker


.header level 1;ASLINK Relocating Linker

ASLINK is the companion linker for the ASxxxx assemblers.

The program ASLINK is a general relocating linker performing the
following functions:

.list 1
.list element
Bind multiple object modules into a single memory image
.list element
Resolve inter-module symbol references 
.list element
Combine code belonging to the same area from multiple object files
into a single contiguous memory region
.list element
Search and import object module libraries for undefined global variables
.list element
Perform byte and word program counter relative (pc#or#pcr) addressing
calculations
.list element
Define absolute symbol values at link time
.list element
Define absolute area base address values at link time
.list element
Produce Intel Hex or Motorola S19 output file
.list element
Produce a map of the linked memory image
.list element
Produce an updated listing file with the relocated addresses and data
.end list


.header level 1;INVOKING ASLINK

The linker may run in the command line mode or command file modes.
The allowed startup linker commands are:

.skip
.left margin +16
.indent -16
-c/-f###########command line#/#command file modes
.skip
.indent -16
-p/-n###########enable/disable echo file.lnk input to stdout
.left margin -16

If command line mode is selected, all linker commands come from stdin,
if the command file mode is selected the commands are input from
the specified file (extension must be .lnk).

The linker is started via
.skip
.indent 8
ASLINK	-(cfpn)
.skip
After invoking the linker the valid options are:

.list 1
.list element
-i/-s###Intel Hex (file.ihx) or Motorola S19 (file.s19) image output
file.
.list element
-m######Generate a map file (file.map). This file contains a list
of the symbols (by area) with absolute addresses, sizes of linked
areas, and other linking information.
.list element
-u######Generate an updated listing file (file.rst) derived from
the relocated addresses and data from the linker
.list element
-xdq####Specifies the number radix for the map file (Hexidecimal, Decimal,
or Octal).
.list element
fileN###Files to be linked. Files may be on the same line as the above
options or on a separate line(s) one file per line or multiple files
separated by spaces or tabs.
.list element
-b##area#=#expression (one definition per line)
.break
This specifies an area base address where the expression may contain
constants and/or defined symbols from the linked files.
.list element
-g##symbol#=#expression (one definition per line)
.break
This specifies the value for the symbol where the expression may contain
constants and/or defined symbols from the linked files.
.list element
-k##library directory path
.break
(one definition per line)
This specifies one possible path to an object library. More than
one path is allowed.
.list element
-l##library file specification
.break
(one definition per line)
This specifies a possible library file.  More than one file is
allowed.
.list element
-e######or null line, terminates input to the linker.
.end list


.header level 1;LIBRARY PATH(S) AND FILE(S)

The process of resolving undefined symbols after scanning
the input object files includes the scanning of object module
libraries.  The linker will search through all combinations of the
library path specifications (input by the -k option) and the
library file specifications (input by the -l option) that
lead to an existing library file.  Each library file contains a
list (one file per line) of modules included in this particular
library.  Each existing object module is scanned for a match to the
undefined symbol.  The first module containing the symbol is then
linked with the previous modules to resolve the symbol definition.
The library object modules are rescanned until no more
symbols can be resolved.  The scanning algorithm allows resolution
of back references.  No errors are reported for non existant
library files or object modules.

The library file specification may be formed in one of two ways:
.list 1
.list element
If the library file contained an absolute
path/file specification then this is the
object module's path/file.
.break
(i.e. C:_\...)
.list element
If the library file contains a relative path/file
specification then the concatenation of the path
and this file specification becomes the object module's
path/file.
.break
(i.e. _\...)
.end list

As an example, assume there exists a library file termio.lib
in the syslib directory specifying the following object modules:
.skip
_\6809_\io__disk########first object module
.break
d:_\special_\io__comm###second object module
.skip
and the following parameters were specified to the linker:
.skip
-k c:_\iosystem_\####the first path
.break
-k c:_\syslib_\######the second path
.skip
-l termio##########the first library file
.break
-l io##############the second library file (no such file)
.skip
The linker will attempt to use the following object modules
to resolve any undefined symbols:
.skip
c:_\syslib_\6809_\io__disk.rel#####(concatenated path/file)
.break
d:_\special_\io__comm.rel#########(absolute path/file)
.skip
all other path(s)/file(s) don't exist. (No errors are reported
for non existant path(s)/file(s).)


.header level 1;ASLINK PROCESSING

The linker processes the files in the order they are presented.
The first pass through the input files is used to define all program
areas, the section area sizes, and symbols defined or referenced.
Undefined symbols will initiate a search of any specified library file(s)
and the importing of the module containing the symbol definition.
After the first pass the -b (area base address) definitions, if any,
are processed and the areas linked.

The area linking proceeds by first examining the area types
ABS, CON, REL, OVR and PAG. Absolute areas (ABS) from separate object modules
are always overlayed and have been assembled at a specific address, these
are not normally relocated (if a -b command is used on an absolute area
the area will be relocated). Relative areas (normally defined as REL|CON)
have a base address of 0x0000 as read from the object files, the -b
command specifies the beginning address of the area. All subsequent
relative areas will be concatenated with proceeding relative areas.
Where specific ordering is desired, the first linker input file
should have the area definitions in the desired order. At the
completion of the area linking all area addresses and lengths have been
determined. The areas of type PAG are verified to be on a 256 byte
boundary and that the length does not exceed 256 bytes. Any errors
are noted on stderr and in the map file.

Next the global symbol definitions (-g option), if any, are processed.
The symbol definitions have been delayed until this point because the
absolute addresses of all internal symbols are known and can be used
in the expression calculations.

Before continuing with the linking process the symbol table is scanned
to determine if any symbols have been referenced but not defined.
Undefined symbols are listed on the stderr device. if a .module directive
was included in the assembled file the module making the reference to
this undefined variable will be printed.

Constants defined as global in more than one module will be flagged as
multiple definitions if their values are not identical.

After the preceeding processes are complete the linker may output a map
file (-m option). This file provides the following information:

.list 1
.list element
Global symbol values and label absolute addresses
.list element
Defined areas and there lengths
.list element
Remaining undefined symbols
.list element
List of modules linked
.list element
List of library modules linked
.list element
List of -b and -g definitions
.end list

.skip 2

The final step of the linking process is performed during the second pass
of the input files. As the xxx.rel files are read the code is relocated
by substituting the physical addresses for the referenced symbols and areas
and may be output in Intel or Motorola formats. The number of files
linked and symbols defined/referenced is limited by the processor space
available to build the area/symbol lists.  If the -u option is specified
then the listing files (file.lst) associated with the relocation files
(file.rel) are scanned and used to create a new file (file.rst) which
has all addresses and data relocated to their final values.


.header level 1;Linker Input Format

The linkers' input object file is an ascii file containing
the information needed by the linker to bind multiple object
modules into a complete loadable memory image.

.skip
The object module contains the following designators:
.skip;.literal
	[XDQ][HL]
		X	Hexidecimal radix
		D	Decimal radix
		Q	Octal radix

		H	Most significant byte first
		L	Least significant byte first

	H	Header 
	M	Module
	A	Area
	S	Symbol
	T	Object code
	R	Relocation information
	P	Paging information
.end literal


.header level 2;Object Module Format

The first line of an object module contains the [XDQ][HL] format
specifier (i.e. XH indicates a hexidecimal file with most significant
byte first) for the following designators.


.header level 2;Header Line

.indent 8
H aa areas gg global symbols

The header line specifies the number of areas(aa) and the number of
global symbols(gg) defined or referenced in this object module
segment.


.header level 2;Module Line

.indent 8
M name

The module line specifies the module name from which this header segment
was assembled. The module line will not appear if the .module directive
was not used in the source program.


.header level 2;Symbol Line

.indent 8
S string Defnnnn
.skip
.indent 16
or
.skip
.indent 8
S string Refnnnn


The symbol line defines (Def) or references (Ref) the symbol 'string'
with the value nnnn. The defined value is relative to the current
area base address. References to constants and external global symbols will
always appear before the first area definition. References to external
symbols will have a value of zero.


.header level 2;Area Line

.indent 8
A label size ss flags ff

The area line defines the area label, the size (ss) of the area in
bytes, and the area flags (ff). The area flags specify
the ABS, REL, CON, OVR, and PAG parameters:
.skip
.indent 8
OVR/CON##(0x04/0x00 i.e. bit position 2)
.skip
.indent 8
ABS/REL##(0x08/0x00 i.e. bit position 3)
.skip
.indent 8
PAG######(0x10      i.e. bit position 4)

.header level 2;T Line

.indent 8
T xx xx nn nn nn nn nn ...

The T line contains the assembled code output by the assembler
with xx xx being the offset address from the current area base
address and nn being the assembled instructions and data in byte
format.


.header level 2;R Line

.indent 8
R 0 0 nn nn  n1 n2 xx xx  ...

The R line provides the relocation information to the linker.
The nn nn value is the current area index, i.e. which area the
current values were assembled. Relocation information is encoded
in groups of 4 bytes:

.list 1
.list element
n1 is the relocation mode and object format
.list 0
.list element
bit 0  word(0x00)/byte(0x01)
.list element
bit 1  relocatable area(0x00)/symbol(0x02)
.list element
bit 2  normal(0x00)/PC relative(0x04) relocation
.list element
bit 3  1-byte(0x00)/2-byte(0x08) object format for byte data
.list element
bit 4  signed(0x00)/unsigned(0x10) byte data
.list element
bit 5  normal(0x00)/page '0'(0x20) reference
.list element
bit 6  normal(0x00)/page 'nnn'(0x40) reference
.list element
bit 7  LSB byte(0x00)/MSB byte(0x80) with 2-byte mode
.end list 0
.list element
n2 is a byte index into the corresponding (i.e. preceeding) T line data
(i.e. a pointer to the data to be updated by the relocation).  The T line
data may be 1-byte or 2-byte byte data format or 2-byte word format.
.list element
xx#xx is the area/symbol index for the area/symbol being referenced.
the corresponding area/symbol is found in the header area/symbol lists.
.end list

.skip
The groups of 4 bytes are repeated for each item requiring relocation
in the preceeding T line.

.header level 2;P Line

.indent 8
P 0 0 nn nn  n1 n2 xx xx

The P line provides the paging information to the linker
as specified by a .setdp directive. The format of the relocation
information is identical to that of the R line.  The corresponding
T line has the following information:

.indent 8
T xx xx aa aa bb bb

Where aa#aa is the area reference number which specifies the selected
page area and bb#bb is the base address of the page.  bb#bb will require
relocation processing if the 'n1#n2#xx#xx' is specified in the P line.
The linker will verify that the base address is on a 256 byte boundary
and that the page length of an area defined with the PAG type
is not larger than 256 bytes.

The linker defaults any direct page references to the first area
defined in the input REL file.  All ASxxxx assemblers will specify
the __CODE area first, making this the default page area.


.header level 1;Linker Error Messages

The linker provides detailed error messages allowing the programmer
to quickly find the errant code.  As the linker completes pass#1 over
the input file(s) it reports any page boundary or page length errors
as follows:
.tp 6;.skip
.literal
?ASlink-Warning-Paged Area PAGE0 Boundary Error

and/or

?ASlink-Warning-Paged Area PAGE0 Length Error
.end literal
.skip
where PAGE0 is the paged area.

During Pass two the linker reads the T, R, and P lines performing the
necessary relocations and outputting the absolute code.  Various 
errors may be reported during this process

.tp 10
The P line processing can produce only one possible error:
.skip
.literal
?ASlink-Warning-Page Definition Boundary Error
         file        module      pgarea      pgoffset
  PgDef  t6809l      t6809l      PAGE0       0001
.end literal
.skip
The error message specifies the file and module where the .setdp
direct was issued and indicates the page area and the page offset
value determined after relocation.

.tp 10
.skip 2
The R line processing produces various errors:
.skip
.literal
?ASlink-Warning-Byte PCR relocation error for symbol  bra2
         file        module      area        offset
  Refby  t6809l      t6809l      TEST        00FE
  Defin  tconst      tconst      .  .ABS.    0080
.end literal
.tp6;.skip
.literal
?ASlink-Warning-Unsigned Byte error for symbol  two56
         file        module      area        offset
  Refby  t6800l      t6800l      DIRECT      0015
  Defin  tconst      tconst      .  .ABS.    0100
.end literal
.tp6;.skip
.literal
?ASlink-Warning-Page0 relocation error for symbol  ltwo56
         file        module      area        offset
  Refby  t6800l      t6800l      DIRECT      000D
  Defin  tconst      tconst      DIRECT      0100
.end literal
.tp6;.skip
.literal
?ASlink-Warning-Page Mode relocation error for symbol  two56
         file        module      area        offset
  Refby  t6809l      t6809l      DIRECT      0005
  Defin  tconst      tconst      .  .ABS.    0100
.end literal
.tp6;.skip
.literal
?ASlink-Warning-Page Mode relocation error
         file        module      area        offset
  Refby  t           Pagetest    PROGRAM     0006
  Defin  t           Pagetest    DIRECT      0100
.end literal
.skip
These error messages specify the file, module, area, and
offset within the area of the code referencing (Refby) and
defining (Defin) the symbol.
If the symbol is defined in the same module as the
reference the linker is unable to report the symbol name.
The assembler listing file(s) should be examined at the
offset from the specified area to located the offending code.

The errors are:
.list 1
.list element
The byte PCR error is caused by exceeding the pc relative byte
branch range.
.list element
The Unsigned byte error indicates an indexing value
was negative or larger than 255.
.list element
The Page0 error is generated if
the direct page variable is not in the page0 range of 0 to 255.
.list element
The page mode error is generated if the direct variable is not
within the current direct page (6809).
.end list

.subtitle ;INTEL HEX OUTPUT FORMAT
.page
.header level 1;Intel Hex Output Format
.left margin 32
.indent -24
Record#Mark#Field####-##This field signifies the start of a record,
and consists of an ascii colon (:).
.skip 1
.indent -24
Record#Length#Field##-##This field consists of two ascii characters
which indicate the number of data bytes in this record. The characters
are the result of converting the number of bytes in binary to two
ascii characters, high digit first.  An End of File record contains
two ascii zeros in this field.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the four ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either four ascii
zeros or the program entry address.  Currently the entry address
option is not supported.
.skip 1
.indent -24
Record#Type#Field####-##This field identifies the record type, which
is either 0 for data records or 1 for an End of File record.  It
consists of two ascii characters, with the high digit of the record type
first, followed by the low digit of the record type.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field, the record type field,
and the data field. This sum is then negated (2's complement) and converted
to two ascii characters, high digit first.
.left margin 8
.subtitle

.subtitle ;MOTOROLA S1-S9 OUTPUT FORMAT
.page
.header level 1;Motorla S1-S9 Output Format
.left margin 32
.indent -24
Record#Type#Field####-##This field signifies the start of a record
and identifies the the record type as follows:
.skip 1
.indent 4
Ascii S1 - Data Record
.break
.indent 4
Ascii S9 - End of File Record
.skip 1
.indent -24
Record#Length#Field##-##This field specifies the record length
which includes the address, data, and checksum fields.
The 8 bit record length value is converted to two
ascii characters, high digit first.
.skip 1
.indent -24
Load#Address#Field###-##This field consists of the four ascii characters
which result from converting the the binary value of the address in which
to begin loading this record. The order is as follows:
.skip 1
.indent 4
High digit of high byte of address.
.break
.indent 4
Low digit of high byte of address.
.break
.indent 4
High digit of low byte of address.
.break
.indent 4
Low digit of low byte of address.
.skip 1
In an End of File record this field consists of either four ascii
zeros or the program entry address.  Currently the entry address
option is not supported.
.skip 1
.indent -24
Data#Field###########-##This field consists of the actual data,
converted to two ascii characters, high digit first. There are no
data bytes in the End of File record.
.skip 1
.indent -24
Checksum#Field#######-##The checksum field is the 8 bit binary sum of
the record length field, the load address field,
and the data field. This sum is then complemented (1's complement)
and converted to two ascii characters, high digit first.
.left margin 8
.subtitle
